module tff(T,clock,clear_b,Q);

	input T;
	input clock;
	input clear_b
	output reg q;

	always @(posedge clock, negedge clear_b)begin
	
	if(clear_b==1'b0)
		Q<=0;
	else
		if(T==1)
		   Q<=~Q;
	end
		
endmodule

module counter8bit(KEY,SW,HEX0,HEX1);

input [1:0]KEY;// KEY[0] clock
input [1:0]SW;//SW1 enable, SW0 clear
output [6:0] HEX0;//
output [6:0] HEX1;

wire [13:0] w;

tff b0(SW[1],KEY[0],SW[0],w[0]);

tff






















//hexdecoder being impletemented.NOTE: a represents bit 3 not 0.

module HexDecoder(input a, b,c,d, output s0,s1,s2,s3,s4,s5,s6);
	assign s0=
	~((a|b|c|~d)
	  &(a|~b|c|d)
	  &(~a|b|~c|~d)
	  &(~a|~b|c|~d));	

	assign s1=
	~((a|~b|c|~d)
	  &(a|~b|~c|d)
	  &(~a|b|~c|~d)
	  &(~a|~b|c|d)
          &(~a|~b|~c|d)
          &(~a|~b|~c|~d));

	assign s2=~((a|b|~c|d)
	  &(~a|~b|c|d)
	  &(~a|~b|~c|d)
	  &(~a|~b|~c|~d));

	assign s3=~((a|b|c|~d)
	  &(a|~b|c|d)
	  &(a|~b|~c|~d)
	  &(~a|b|c|~d)
	  &(~a|b|~c|d)
	  &(~a|~b|~c|~d));

	assign s4=~((a|b|c|~d)
	  &(a|b|~c|~d)
	  &(a|~b|c|d)
	  &(a|~b|c|~d)
	  &(a|~b|~c|~d)
	  &(~a|b|c|~d));

	assign s5=~((a|b|c|~d)
	  &(a|b|~c|d)
	  &(a|b|~c|~d)
	  &(a|~b|~c|~d)
     &(~a|~b|c|~d));

	assign s6=~((a|b|c|d)
	  &(a|b|c|~d)
	  &(a|~b|~c|~d)
	  &(~a|~b|c|d));

endmodule

